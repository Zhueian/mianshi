
        1。debug流程：
            1.1 : ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext("app.xml");
            1.2 : step into
                  // 急切地加载 ContextClosedEvent 类以避免奇怪的类加载器问题
                  // 在 WebLogic 8.1 中关闭应用程序。 （达斯汀·伍兹报道。）
                  // Eagerly load the ContextClosedEvent class to avoid weird classloader issues
                  // on application shutdown in WebLogic 8.1. (Reported by Dustin Woods.)
            1.3 : AbstractApplicationContext->ContextClosedEvent.class.getName();
            1.4 : ClassPathXmlApplicationContext->this(new String[] {configLocation}, true, null );->refresh();
                  // 同步模块里的准备刷新
            1.5 : AbstractApplicationContext->prepareRefresh()
                  // Initialize any placeholder property sources in the context environment
                  // 初始化上下文环境的所有占位符属性资源。
            1.6 : AbstractApplicationContext->initPropertySources()
                  // 这个比较深比较复杂
                  // Tell the subclass to refresh the internal bean factory.
                  // 告知子类去刷新内部bean工厂
            1.7 : AbstractApplicationContext->ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
                  //
            1.8 : AbstractRefreshableApplicationContext.refreshBeanFactory()

         2。spring源码方法论：
            1.0 :

         3.老连的spring-debug：
            1.0 :

         4.第四节课：spring启动流程细节
            4.1 : AbstractApplicationContext.this.refresh.prepareRefresh:
                1.前戏，容器刷新前的准备工作
                2。设置容器的启动时间
                3。设置活跃状态为active
                4。设置关闭状态为false
                5。获取Environment对象，并加载当前系统的属性值到Environment中
                6。初始化监听器和时间的集合对象，集合默认为空
            4.2 : AbstractApplicationContext.this.obtainFreshBeanFactory();
                1.refreshBeanFactory.销毁已存在的beanFactory。保证运行时容器，refresh是最新beanFactory
                2，老连说是-适配器设计模式：
                    AbstractXmlApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory)
                        XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);
                3.配置文件现在多用.xsd ,以前有dtd（document to defin ition）和sax（simple api 4 xml），
                    本地路径在spring-context.META-INF.spring.schemas -> org/springframework/context/config/spring-context.xsd
                4.适配器设计模式：AbstractXmlApplicationContext.initBeanDefinitionReader
                5.xml->doc对象：String[] config -> Resource[] -> inputstream -> docment -> BeanDefinition
                6.小技巧，类继承图可以add class，看多个类继承关系
                7。beandefinition放到beanfactory工厂准备工作
            4.3 : spring第七节课 spring的bean
                1。refresh（）第三个方法：prepareBeanFactory(beanFactory)，beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));
                    增加一个属性编辑注册器，怎么理解呢：比如要自定义弄个时间解析：yyyy-MM-dd 或者地址解析器:xxprivider-xxcity-xxarea,这种让spring理解，扩展。
                    在'填充属性'阶段
                2.spring骚写法for循环
                    PropertyEditorRegisterSupport.getCustomEditor():
                    for(Itertor<Class<?>> it = this.customEditors.keySet().iterator ; it.hasNext() && editor != null ;)
                3.TODO 打开BeanFactory ignoreDependencyInterface方法的正确姿势:https://www.jianshu.com/p/3c7e0608ff1f

         5. 第八节课：spring的beanFactoryPostProcess的执行1、refresh()第4个方法：
                1。@Autowired byName或者byType,方法名：autowiredBeanByName,
                2.AbstractApplicationContext.LOAD_TIME_WEAVER_BEAN_NAME:spring的aop织入，增加对AspectJ的支持。
                    java有三种织入方式：aspectJ用了1、2两种
                    1。编译器织入：用特殊的java编译器织入。
                    2。类加载器织入：cglib和jdk动态代理就是，类字节码加载时织入
                    3。运行时织入：TODO desc
                3。postPorcessBeanFactory做扩展：继承MyClassPathXmlApplicationContext,主动重写postProcessBeanFactory方法。
                4。refresh()第5个方法，invokeBeanFactoryPostProcessors。调用各种beanFactory处理器,比较繁琐。
                    1。xml的<bean dataSource> ${userName}就是这里替换的。
                    2。BeanDefinitionRegistry接口提供的是BeanDefinition的增删改查api
